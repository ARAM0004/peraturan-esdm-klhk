name: Auto-Scraper JDIH

# trigger on schedule and manual run â€” adjust as needed
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write   # needed so the workflow can push commits

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # get full history so we can rebase/merge safely
          persist-credentials: true

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run scraper
        run: |
          # Replace the lines below with your existing scraping commands
          # For example: python scraper.py
          echo "Run your scraping script here"
          # Example: python ./scripts/scrape.py --output .
          
      - name: Stage changes
        run: |
          git add -A

      - name: Commit changes if any
        id: commit-check
        run: |
          if git diff --cached --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            git commit -m "ðŸ¤– Auto-update regulations $(date -u +'%Y-%m-%d %H:%M:%S')"
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch remote and rebase onto origin/main
        if: steps.commit-check.outputs.no_changes == 'false'
        run: |
          # Ensure remote main is fetched
          git fetch origin main
          # Make sure we are on the workflow's branch (should be main)
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "On branch: $CURRENT_BRANCH"
          # Rebase local commit(s) onto the latest origin/main to avoid non-fast-forward push errors.
          # If rebase fails, abort and fail the job so maintainers can resolve conflicts manually.
          git rebase origin/main || {
            echo "Rebase failed â€” aborting. Manual intervention required." >&2
            git rebase --abort || true
            exit 1
          }

      - name: Push changes
        if: steps.commit-check.outputs.no_changes == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Push the rebased local changes to origin/main
          git push origin HEAD:main

      - name: No-op when nothing to commit
        if: steps.commit-check.outputs.no_changes == 'true'
        run: echo "Nothing to push, exiting."
